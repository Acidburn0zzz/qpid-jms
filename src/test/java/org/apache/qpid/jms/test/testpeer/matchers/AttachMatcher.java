/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

package org.apache.qpid.jms.test.testpeer.matchers;

import java.util.HashMap;
import org.apache.qpid.proton.amqp.Symbol;
import org.apache.qpid.proton.amqp.UnsignedLong;
import org.apache.qpid.jms.test.testpeer.FrameType;
import org.apache.qpid.jms.test.testpeer.FrameWithNoPayloadMatchingHandler;
import org.hamcrest.Matcher;

/**
 * Generated by generate-matchers.xsl, which resides in this package.
 */
public class AttachMatcher extends FrameWithNoPayloadMatchingHandler
{

    private static final int FIELD_NAME = 0;
    private static final int FIELD_HANDLE = 1;
    private static final int FIELD_ROLE = 2;
    private static final int FIELD_SND_SETTLE_MODE = 3;
    private static final int FIELD_RCV_SETTLE_MODE = 4;
    private static final int FIELD_SOURCE = 5;
    private static final int FIELD_TARGET = 6;
    private static final int FIELD_UNSETTLED = 7;
    private static final int FIELD_INCOMPLETE_UNSETTLED = 8;
    private static final int FIELD_INITIAL_DELIVERY_COUNT = 9;
    private static final int FIELD_MAX_MESSAGE_SIZE = 10;
    private static final int FIELD_OFFERED_CAPABILITIES = 11;
    private static final int FIELD_DESIRED_CAPABILITIES = 12;
    private static final int FIELD_PROPERTIES = 13;

    public AttachMatcher()
    {
        super(FrameType.AMQP,
              ANY_CHANNEL,
              UnsignedLong.valueOf(0x0000000000000012L),
              Symbol.valueOf("amqp:attach:list"),
              new HashMap<Integer, Matcher<?>>(),
              null);
    }

    @Override
    public AttachMatcher onSuccess(Runnable onSuccessAction)
    {
        super.onSuccess(onSuccessAction);
        return this;
    }

    public AttachMatcher withName(Matcher<?> m)
    {
        getMatchers().put(FIELD_NAME, m);
        return this;
    }

    public AttachMatcher withHandle(Matcher<?> m)
    {
        getMatchers().put(FIELD_HANDLE, m);
        return this;
    }

    public AttachMatcher withRole(Matcher<?> m)
    {
        getMatchers().put(FIELD_ROLE, m);
        return this;
    }

    public AttachMatcher withSndSettleMode(Matcher<?> m)
    {
        getMatchers().put(FIELD_SND_SETTLE_MODE, m);
        return this;
    }

    public AttachMatcher withRcvSettleMode(Matcher<?> m)
    {
        getMatchers().put(FIELD_RCV_SETTLE_MODE, m);
        return this;
    }

    public AttachMatcher withSource(Matcher<?> m)
    {
        getMatchers().put(FIELD_SOURCE, m);
        return this;
    }

    public AttachMatcher withTarget(Matcher<?> m)
    {
        getMatchers().put(FIELD_TARGET, m);
        return this;
    }

    public AttachMatcher withUnsettled(Matcher<?> m)
    {
        getMatchers().put(FIELD_UNSETTLED, m);
        return this;
    }

    public AttachMatcher withIncompleteUnsettled(Matcher<?> m)
    {
        getMatchers().put(FIELD_INCOMPLETE_UNSETTLED, m);
        return this;
    }

    public AttachMatcher withInitialDeliveryCount(Matcher<?> m)
    {
        getMatchers().put(FIELD_INITIAL_DELIVERY_COUNT, m);
        return this;
    }

    public AttachMatcher withMaxMessageSize(Matcher<?> m)
    {
        getMatchers().put(FIELD_MAX_MESSAGE_SIZE, m);
        return this;
    }

    public AttachMatcher withOfferedCapabilities(Matcher<?> m)
    {
        getMatchers().put(FIELD_OFFERED_CAPABILITIES, m);
        return this;
    }

    public AttachMatcher withDesiredCapabilities(Matcher<?> m)
    {
        getMatchers().put(FIELD_DESIRED_CAPABILITIES, m);
        return this;
    }

    public AttachMatcher withProperties(Matcher<?> m)
    {
        getMatchers().put(FIELD_PROPERTIES, m);
        return this;
    }

}

