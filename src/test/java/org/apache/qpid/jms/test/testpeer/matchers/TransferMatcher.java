/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

package org.apache.qpid.jms.test.testpeer.matchers;

import java.util.HashMap;
import org.apache.qpid.proton.amqp.Symbol;
import org.apache.qpid.proton.amqp.UnsignedLong;
import org.apache.qpid.jms.test.testpeer.FrameType;
import org.apache.qpid.jms.test.testpeer.FrameWithNoPayloadMatchingHandler;
import org.hamcrest.Matcher;

/**
 * Generated by generate-matchers.xsl, which resides in this package.
 */
public class TransferMatcher extends FrameWithNoPayloadMatchingHandler
{

    private static final int FIELD_HANDLE = 0;
    private static final int FIELD_DELIVERY_ID = 1;
    private static final int FIELD_DELIVERY_TAG = 2;
    private static final int FIELD_MESSAGE_FORMAT = 3;
    private static final int FIELD_SETTLED = 4;
    private static final int FIELD_MORE = 5;
    private static final int FIELD_RCV_SETTLE_MODE = 6;
    private static final int FIELD_STATE = 7;
    private static final int FIELD_RESUME = 8;
    private static final int FIELD_ABORTED = 9;
    private static final int FIELD_BATCHABLE = 10;

    public TransferMatcher()
    {
        super(FrameType.AMQP,
              ANY_CHANNEL,
              UnsignedLong.valueOf(0x0000000000000014L),
              Symbol.valueOf("amqp:transfer:list"),
              new HashMap<Integer, Matcher<?>>(),
              null);
    }

    @Override
    public TransferMatcher onSuccess(Runnable onSuccessAction)
    {
        super.onSuccess(onSuccessAction);
        return this;
    }

    public TransferMatcher withHandle(Matcher<?> m)
    {
        getMatchers().put(FIELD_HANDLE, m);
        return this;
    }

    public TransferMatcher withDeliveryId(Matcher<?> m)
    {
        getMatchers().put(FIELD_DELIVERY_ID, m);
        return this;
    }

    public TransferMatcher withDeliveryTag(Matcher<?> m)
    {
        getMatchers().put(FIELD_DELIVERY_TAG, m);
        return this;
    }

    public TransferMatcher withMessageFormat(Matcher<?> m)
    {
        getMatchers().put(FIELD_MESSAGE_FORMAT, m);
        return this;
    }

    public TransferMatcher withSettled(Matcher<?> m)
    {
        getMatchers().put(FIELD_SETTLED, m);
        return this;
    }

    public TransferMatcher withMore(Matcher<?> m)
    {
        getMatchers().put(FIELD_MORE, m);
        return this;
    }

    public TransferMatcher withRcvSettleMode(Matcher<?> m)
    {
        getMatchers().put(FIELD_RCV_SETTLE_MODE, m);
        return this;
    }

    public TransferMatcher withState(Matcher<?> m)
    {
        getMatchers().put(FIELD_STATE, m);
        return this;
    }

    public TransferMatcher withResume(Matcher<?> m)
    {
        getMatchers().put(FIELD_RESUME, m);
        return this;
    }

    public TransferMatcher withAborted(Matcher<?> m)
    {
        getMatchers().put(FIELD_ABORTED, m);
        return this;
    }

    public TransferMatcher withBatchable(Matcher<?> m)
    {
        getMatchers().put(FIELD_BATCHABLE, m);
        return this;
    }

}

