/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

package org.apache.qpid.jms.test.testpeer.matchers;

import java.util.HashMap;
import org.apache.qpid.proton.amqp.Symbol;
import org.apache.qpid.proton.amqp.UnsignedLong;
import org.apache.qpid.jms.test.testpeer.FrameType;
import org.apache.qpid.jms.test.testpeer.FrameWithNoPayloadMatchingHandler;
import org.hamcrest.Matcher;

/**
 * Generated by generate-matchers.xsl, which resides in this package.
 */
public class BeginMatcher extends FrameWithNoPayloadMatchingHandler
{

    private static final int FIELD_REMOTE_CHANNEL = 0;
    private static final int FIELD_NEXT_OUTGOING_ID = 1;
    private static final int FIELD_INCOMING_WINDOW = 2;
    private static final int FIELD_OUTGOING_WINDOW = 3;
    private static final int FIELD_HANDLE_MAX = 4;
    private static final int FIELD_OFFERED_CAPABILITIES = 5;
    private static final int FIELD_DESIRED_CAPABILITIES = 6;
    private static final int FIELD_PROPERTIES = 7;

    public BeginMatcher()
    {
        super(FrameType.AMQP,
              ANY_CHANNEL,
              UnsignedLong.valueOf(0x0000000000000011L),
              Symbol.valueOf("amqp:begin:list"),
              new HashMap<Integer, Matcher<?>>(),
              null);
    }

    @Override
    public BeginMatcher onSuccess(Runnable onSuccessAction)
    {
        super.onSuccess(onSuccessAction);
        return this;
    }

    public BeginMatcher withRemoteChannel(Matcher<?> m)
    {
        getMatchers().put(FIELD_REMOTE_CHANNEL, m);
        return this;
    }

    public BeginMatcher withNextOutgoingId(Matcher<?> m)
    {
        getMatchers().put(FIELD_NEXT_OUTGOING_ID, m);
        return this;
    }

    public BeginMatcher withIncomingWindow(Matcher<?> m)
    {
        getMatchers().put(FIELD_INCOMING_WINDOW, m);
        return this;
    }

    public BeginMatcher withOutgoingWindow(Matcher<?> m)
    {
        getMatchers().put(FIELD_OUTGOING_WINDOW, m);
        return this;
    }

    public BeginMatcher withHandleMax(Matcher<?> m)
    {
        getMatchers().put(FIELD_HANDLE_MAX, m);
        return this;
    }

    public BeginMatcher withOfferedCapabilities(Matcher<?> m)
    {
        getMatchers().put(FIELD_OFFERED_CAPABILITIES, m);
        return this;
    }

    public BeginMatcher withDesiredCapabilities(Matcher<?> m)
    {
        getMatchers().put(FIELD_DESIRED_CAPABILITIES, m);
        return this;
    }

    public BeginMatcher withProperties(Matcher<?> m)
    {
        getMatchers().put(FIELD_PROPERTIES, m);
        return this;
    }

    public Object getReceivedRemoteChannel()
    {
        return getReceivedFields().get(FIELD_REMOTE_CHANNEL);
    }

    public Object getReceivedNextOutgoingId()
    {
        return getReceivedFields().get(FIELD_NEXT_OUTGOING_ID);
    }

    public Object getReceivedIncomingWindow()
    {
        return getReceivedFields().get(FIELD_INCOMING_WINDOW);
    }

    public Object getReceivedOutgoingWindow()
    {
        return getReceivedFields().get(FIELD_OUTGOING_WINDOW);
    }

    public Object getReceivedHandleMax()
    {
        return getReceivedFields().get(FIELD_HANDLE_MAX);
    }

    public Object getReceivedOfferedCapabilities()
    {
        return getReceivedFields().get(FIELD_OFFERED_CAPABILITIES);
    }

    public Object getReceivedDesiredCapabilities()
    {
        return getReceivedFields().get(FIELD_DESIRED_CAPABILITIES);
    }

    public Object getReceivedProperties()
    {
        return getReceivedFields().get(FIELD_PROPERTIES);
    }

}

